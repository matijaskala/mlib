/*
 * This file is part of MLib
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_VARIANT
#define NON_STD_VARIANT

#include <exception>

class {} nullvalue;

namespace non_std
{

class bad_get : public std::exception {
public:
    virtual const char* what() const noexcept;
};

template< typename... _Types >
struct variant;

template<>
struct variant<> {
    variant () = default;
};

template< typename _Value >
struct _VariantValue {
    _VariantValue ( _Value* __value ) : value ( __value ) {}

    ~_VariantValue () {
        if ( value )
            delete value;
    }

    _Value* value;
};

template< typename _FirstType, typename... _OtherTypes >
struct variant<_FirstType, _OtherTypes...> : public variant<_OtherTypes...>, protected _VariantValue<_FirstType> {
    using next = variant<_OtherTypes...>;
    using value = _VariantValue<_FirstType>;

    using next::operator=;

    explicit variant ( )
        : next ( )
        , value ( nullptr ) {}

    template< typename... _OtherTypesNotRequired >
    explicit variant ( const _FirstType& __first_value, _OtherTypesNotRequired... __other_values )
        : next ( __other_values... )
        , value ( new _FirstType ( __first_value ) ) {}

    template< typename... _OtherTypesNotRequired >
    explicit variant ( decltype(nullvalue), _OtherTypesNotRequired... __other_values )
        : next ( __other_values... )
        , value ( nullptr ) {}

    variant& operator= ( const _FirstType& value ) {
        set<_FirstType>( value );
        return *this;
    }

    operator const _FirstType& () const {
        return get<_FirstType>;
    }

    template< typename _Type >
    bool valid () const {
        return _VariantValue< _Type >::value;
    }

    template< typename _Type >
    const _Type& get () const {
        auto value = _VariantValue< _Type >::value;
        if ( !value )
            throw bad_get();
        return *value;
    }

    template< typename _Type >
    void set ( const _Type& __value ) {
        auto& value = _VariantValue< _Type >::value;
        if ( value )
            delete value;
        value = new _Type ( __value );
    }

};
}

#endif // NON_STD_VARIANT
