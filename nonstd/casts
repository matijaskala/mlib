/*
 * This file is part of MLib
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_CASTS
#define NON_STD_CASTS

#include <sstream>
#include <typeinfo>

namespace non_std
{

class bad_lexical_cast : public std::bad_cast {
public:
    virtual const char* what() const noexcept;
};
}

template < typename _Res, typename _Arg >
inline _Res lexical_cast ( const _Arg& s ) throw ( non_std::bad_lexical_cast ) {
    std::stringstream stream;
    _Res r;
    if ( !( stream << s ) || !( stream >> r ) || stream.rdbuf()->in_avail() )
        throw non_std::bad_lexical_cast();
    return r;
}

template< typename _Res, typename _Arg >
struct auto_cast_helper {
    static _Res cast ( _Arg s ) {
        return s;
    }
};

template< typename _Arg >
struct auto_cast_helper<std::string, _Arg> {
    static std::string cast ( _Arg s ) {
        return lexical_cast<std::string> ( s );
    }
};

template< typename _Res >
struct auto_cast_helper<_Res, std::string> {
    static _Res cast ( std::string s ) {
        return lexical_cast<_Res> ( s );
    }
};

template<>
struct auto_cast_helper<std::string, std::string> {
    static std::string cast ( std::string s ) {
        return s;
    }
};

template< typename _Res, typename _Arg >
inline _Res auto_cast ( _Arg s ) {
    return auto_cast_helper<_Res,_Arg>::cast ( s );
}

#endif // NON_STD_CASTS
