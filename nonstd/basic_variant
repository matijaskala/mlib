/*
 * This file is part of MLib
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef NON_STD_BASIC_VARIANT
#define NON_STD_BASIC_VARIANT

#include <stdexcept>
#include <typeindex>
#include "casts"

namespace non_std
{

class bad_get : public std::exception {
public:
    virtual const char* what() const noexcept;
};

template< typename... _Types >
class variant_manager;

template< typename _FirstType, typename... _OtherTypes >
class variant_manager<_FirstType,_OtherTypes...> : public variant_manager<_OtherTypes...> {
    using next = variant_manager<_OtherTypes...>;

    static std::type_index current_type() { return typeid(_FirstType); }

public:
    using next::create;

    static void create ( _FirstType __value, std::type_index& type, void*& data ) {
        data = new _FirstType ( __value );
        type = current_type();
    }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, std::type_index type, void* data ) {
        if ( type == current_type() )
            visitor ( static_cast<_FirstType*> ( data ) );
        else
            next::apply_visitor ( visitor, type, data );
    }
};

template<>
class variant_manager<> {
    static std::type_index current_type() { return typeid(void); }

public:
    using null_t = std::nullptr_t;
    static std::type_index nulltype() { return current_type(); }
    static constexpr null_t null() { return nullptr; }

    static void create ( null_t, std::type_index& type, void*& data ) { /* leave null */ }

    template< class Visitor >
    static void apply_visitor ( Visitor& visitor, std::type_index type, void* data ) {
        if ( type == current_type() ) {
            if ( data )
                throw std::runtime_error ( "data != null" );
            visitor ( null() );
        }
        else
            throw std::runtime_error ( std::string{} + "unhandled data type '" + type.name() + "'" );
    }
};

template< typename... _Types >
class basic_variant {
    using manager = variant_manager<_Types...>;
    using null_t = typename manager::null_t;

    void* data{manager::null()};
    decltype(manager::nulltype()) type{manager::nulltype()};

    struct visitors {
        template< typename _Type >
        struct get {
            _Type value;
            template< typename _Arg >
            void operator() ( _Arg* __arg ) { value = runtime_cast<_Type> ( *__arg ); }
            void operator() ( null_t ) { throw bad_get(); }
        };

        struct copy {
            basic_variant* target;
            template< typename _Type >
            void operator() ( _Type* data ) { target->set ( *data ); }
            void operator() ( null_t ) { target->reset(); }
        };

        struct destroy {
            template< typename _Type >
            void operator() ( _Type* data ) { delete data; }
            void operator() ( null_t ) {}
        };
    };

public:
    basic_variant ( ) = default;

    basic_variant ( const basic_variant& other ) {
        typename visitors::copy visitor{this};
        other.apply_visitor ( visitor );
    }

    basic_variant ( basic_variant&& other ) {
        type = other.type;
        data = other.data;
        other.type = manager::nulltype();
        other.data = manager::null();
    }

    template< typename _Type >
    basic_variant ( _Type value ) {
        set ( value );
    }

    ~basic_variant ( ) { reset(); }

    basic_variant& operator= ( const basic_variant& other ) {
        typename visitors::copy visitor{this};
        other.apply_visitor ( visitor );
        return *this;
    }

    basic_variant& operator= ( basic_variant&& other ) {
        std::swap ( type, other.type );
        std::swap ( data, other.data );
        return *this;
    }

    template< typename _Type >
    basic_variant& operator= ( _Type value ) {
        set ( value );
        return *this;
    }

    bool is_null () const { return data == manager::null(); }

    template< typename _Visitor >
    void apply_visitor ( _Visitor& visitor ) {
        manager::apply_visitor ( visitor, type, data );
    }

    template< typename _Visitor >
    void apply_visitor ( _Visitor& visitor ) const {
        manager::apply_visitor ( visitor, type, data );
    }

    void reset () {
        typename visitors::destroy visitor;
        manager::apply_visitor ( visitor, type, data );
        type = manager::nulltype();
        data = manager::null();
    }

    template< typename _Type >
    _Type as () const {
        typename visitors::template get<_Type> visitor;
        if ( type == typeid ( _Type ) )
            return get<_Type> ();
        apply_visitor ( visitor );
        return visitor.value;
    }

private:
    template< typename _Type >
    const _Type& get () const {
        auto value = static_cast<_Type*> ( data );
        if ( !value )
            throw bad_get();
        return *value;
    }

    template< typename _Type >
    void set ( _Type value ) {
        reset();
        manager::create ( value, type, data );
    }

};
}

template< typename _Res, typename _Manager >
struct auto_cast_helper<_Res, non_std::basic_variant<_Manager>> {
    static _Res cast ( non_std::basic_variant<_Manager> v ) {
        return v.template as<_Res> ();
    }
};

template< typename _Res, typename _Manager >
inline _Res runtime_cast ( non_std::basic_variant<_Manager> s ) { return s.template as<_Res> (); }

#endif // NON_STD_BASIC_VARIANT
