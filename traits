/*
 * This file is part of MLib
 * Copyright (C) 2014  Matija Skala <mskala@gmx.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef __MLIB_TRAITS__
#define __MLIB_TRAITS__

template<typename,int=0> struct __remove_everything_1;
template<typename,int=0> struct __remove_everything_2;
template<typename T> struct __remove_everything_1<T,2> { using type = T; };
template<typename T> struct __remove_everything_2<T,2> { using type = T; };
template<typename T, int __internal> struct __remove_everything_1 : __remove_everything_2<T,__internal+1> {};
template<typename T, int __internal> struct __remove_everything_1<T*,__internal> : __remove_everything_2<T> {};
template<typename T, int __internal> struct __remove_everything_1<T&,__internal> : __remove_everything_2<T> {};
template<typename T, int __internal> struct __remove_everything_1<T&&,__internal> : __remove_everything_2<T> {};
template<typename T, int __internal> struct __remove_everything_1<T[],__internal> : __remove_everything_2<T> {};
template<typename T, int __internal> struct __remove_everything_2 : __remove_everything_1<T,__internal+1> {};
template<typename T, int __internal> struct __remove_everything_2<T const,__internal> : __remove_everything_1<T> {};
template<typename T, int __internal> struct __remove_everything_2<T volatile,__internal> : __remove_everything_1<T> {};
template<typename T, int __internal> struct __remove_everything_2<T const volatile,__internal> : __remove_everything_1<T> {};
template<typename T, int __internal, std::size_t size> struct __remove_everything_1<T[size],__internal> : __remove_everything_1<T> {};

template<typename T> struct remove_everything { using type = typename __remove_everything_1<T>::type; };
template<typename T> using remove_everything_t = typename remove_everything<T>::type;

#define CLASSOF(object) remove_everything_t<decltype(object)>
#define THIS_T CLASSOF(this)

#endif // __MLIB_TRAITS__
